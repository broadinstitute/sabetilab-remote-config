---

- name: Calculate debconf answer
  set_fact:
    ferm_register_debconf: |
      {% if (ferm_enabled | bool and (ansible_local|d() and
             (ansible_local.root|d() and (ansible_local.root.flags | intersect(ferm_root_flags.cap_net_admin)) or
             (ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled | bool or
             (ansible_local.cap12s.enabled | bool and 'cap_net_admin' in ansible_local.cap12s.list)))))) %}
      yes{% else %}no{% endif %}

- name: Configure ferm status in debconf
  debconf:
    name: 'ferm'
    question: 'ferm/enable'
    vtype: 'boolean'
    value: '{{ "yes" if ferm_register_debconf else "no" }}'

- name: Ensure ferm is installed
  apt:
    name: '{{ ferm_packages }}'
    state: 'present'
    install_recommends: 'no'
  when: (ferm_enabled | bool and (ansible_local|d() and
         (ansible_local.root|d() and (ansible_local.root.flags | intersect(ferm_root_flags.cap_net_admin)) or
         (ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled | bool or
         (ansible_local.cap12s.enabled | bool and 'cap_net_admin' in ansible_local.cap12s.list))))))

- name: Make sure required directories exist
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: 'root'
    group: 'adm'
    mode: '2750'
  with_items: [ '/etc/ferm/ferm.d', '/etc/ferm/filter-input.d',
                '/etc/ferm/hooks/pre.d', '/etc/ferm/hooks/post.d',
                '/etc/ferm/hooks/flush.d' ]

- name: Configure ferm default variables (pre)
  template:
    src: 'etc/default/ferm-pre.j2'
    dest: '/etc/default/ferm'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Configure main ferm config file
  template:
    src: 'etc/ferm/ferm.conf.j2'
    dest: '/etc/ferm/ferm.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Remove ip(6)tables rules if requested
  file:
    path: '/etc/ferm/ferm.d/{{ ferm_weight_map[item.weight_class|d()] | d(item.weight | d(ferm_default_weight)) }}_{{ item.filename | d(((item.role + "_" + ((item.role_weight + "_") if item.role_weight|d() else "")) if item.role|d() else "") + item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    state: 'absent'
  with_flattened:
    - "{{ ferm_rules }}"
    - "{{ ferm_group_rules }}"
    - "{{ ferm_host_rules }}"
    - "{{ ferm_dependent_rules }}"
    - "{{ ferm_default_rules }}"
  when: ((item.type is defined and item.type) and
         (item.delete is defined and item.delete | bool))
  tags: [ 'role::ferm:rules' ]

- name: Configure ip(6)tables rules
  template:
    src: 'etc/ferm/ferm.d/{{ item.type }}.conf.j2'
    dest: '/etc/ferm/ferm.d/{{ ferm_weight_map[item.weight_class|d()] | d(item.weight | d(ferm_default_weight)) }}_{{ item.filename | d(((item.role + "_" + ((item.role_weight + "_") if item.role_weight|d() else "")) if item.role|d() else "") + item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_flattened:
    - "{{ ferm_rules }}"
    - "{{ ferm_group_rules }}"
    - "{{ ferm_host_rules }}"
    - "{{ ferm_dependent_rules }}"
    - "{{ ferm_default_rules }}"
  when: ((item.type is defined and item.type) and
         (item.delete is undefined or not item.delete | bool))
  tags: [ 'role::ferm:rules' ]

- name: Remove iptables INPUT rules if requested
  file:
    path: '/etc/ferm/filter-input.d/{{ ferm_weight_map[item.weight_class|d()] | d(item.weight | d(ferm_default_weight)) }}_{{ item.filename | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    state: 'absent'
  with_flattened:
    - "{{ ferm_input_list }}"
    - "{{ ferm_input_group_list }}"
    - "{{ ferm_input_host_list }}"
    - "{{ ferm_input_dependent_list }}"
  when: ((item.type is defined and item.type) and
         (item.delete is defined and item.delete | bool))
  tags: [ 'role::ferm:rules' ]

- name: Configure iptables INPUT rules
  template:
    src: 'etc/ferm/filter-input.d/{{ item.type }}.conf.j2'
    dest: '/etc/ferm/filter-input.d/{{ ferm_weight_map[item.weight_class|d()] | d(item.weight | d(ferm_default_weight)) }}_{{ item.filename | d(item.type + "_" + item.name | d((item.dport[0] if item.dport|d() else "rules"))) }}.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  with_flattened:
    - "{{ ferm_input_list }}"
    - "{{ ferm_input_group_list }}"
    - "{{ ferm_input_host_list }}"
    - "{{ ferm_input_dependent_list }}"
  when: ((item.type is defined and item.type) and
         (item.delete is undefined or not item.delete | bool))
  tags: [ 'role::ferm:rules' ]

- name: Apply iptables rules if ferm is enabled
  service:
    name: 'ferm'
    state: 'restarted'
  changed_when: False
  when: (ferm_enabled | bool and (ansible_local|d() and
         (ansible_local.root|d() and (ansible_local.root.flags | intersect(ferm_root_flags.cap_net_admin)) or
         (ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled | bool or
         (ansible_local.cap12s.enabled | bool and 'cap_net_admin' in ansible_local.cap12s.list))))))
  tags: [ 'role::ferm:rules' ]

- name: Clear iptables rules if ferm is disabled
  service:
    name: 'ferm'
    state: 'stopped'
  when: ((not ferm_enabled | bool and ferm_flush | bool) and (ansible_local|d() and
         (ansible_local.root|d() and (ansible_local.root.flags | intersect(ferm_root_flags.cap_net_admin)) or
         (ansible_local.cap12s|d() and (not ansible_local.cap12s.enabled | bool or
         (ansible_local.cap12s.enabled | bool and 'cap_net_admin' in ansible_local.cap12s.list))))))
  tags: [ 'role::ferm:rules' ]

- name: Configure sysctl
  template:
    src: 'etc/sysctl.d/30-ferm.conf.j2'
    dest: '/etc/sysctl.d/30-ferm.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Reload sysctl' ]
  tags: [ 'role::ferm:rules' ]

- name: Ensure that /etc/network/if-pre-up.d exists
  file:
    path: '/etc/network/if-pre-up.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Configure forwarding in ifupdown if enabled
  template:
    src: 'etc/network/if-pre-up.d/ferm-forward.j2'
    dest: '/etc/network/if-pre-up.d/ferm-forward'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'role::ferm:rules' ]

- name: Configure ferm default variables (post)
  template:
    src: 'etc/default/ferm-post.j2'
    dest: '/etc/default/ferm'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart ferm' ]

- name: Ensure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save ferm local facts
  template:
    src: 'etc/ansible/facts.d/ferm.fact.j2'
    dest: '/etc/ansible/facts.d/ferm.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [ 'role::ferm:rules' ]

