- hosts: nodes

  environment:
    PLACEHOLDER_VAR: "foobar"

  vars_files:
    - "../settings_field_node.yml"

  vars:
    security_ssh_port: "{{ ssh_port }}"
    autossh_tunnel_client_identity: autossh_id_rsa
    autossh_tunnel_client_key_map:
      - src: "../keys/{{autossh_tunnel_client_identity}}"
    autossh_tunnel_client_host: "{{ manager_domain_name }}"
    autossh_tunnel_client_forward: '{{ ssh_tunnel_port | default(0) }}:127.0.0.1:{{ ssh_port }}'
    autossh_output_script: "/opt/field-node/update_route53.py"
    skip_autossh_restart_handler: true

  roles:
    - tersmitten.autossh-tunnel-client

  tasks:
    - name: Copy in Route53 update script (as template)
      template: 
        src: "./files/update_route53.py.j2"
        dest: "/opt/field-node/update_route53.py"
        mode: "0744"

    - name: setup cron job to update Route53 on reboot
      cron: 
        name: "update route53 (on reboot)"
        special_time: reboot
        job: "/opt/field-node/update_route53.py"
        state: absent

    - name: setup cron job to update Route53 every half-hour
      cron: 
        name: update route53
        minute: "5,35"
        job: "/opt/field-node/update_route53.py"

    - name: setup cron job to restart autossh service every day
      cron: 
        name: restart autossh service
        hour: "4"
        job: "service autossh-tunnel-client restart"

    - name: Update Route53 zone record for this node
      command: "/opt/field-node/update_route53.py"

    - name: restart autossh-tunnel-client
      command: service autossh-tunnel-client restart
      async: 1
      poll: 0
      ignore_errors: true

    # - name: restart machine
    #   shell: sleep 2 && reboot
    #   async: 1
    #   poll: 0
    #   become: yes
    #   ignore_errors: true

    - name: wait for DNS change bearing new port to propagate to AWS nameserver
      local_action: wait_for timeout=50

    - name: get new port from DNS
      local_action: shell dig TXT +short {{ inventory_hostname }}.{{ domain_name }} @ns-491.awsdns-61.com | perl -lape 's/^"P(?<port_num>[0-9]+)\\.*"/$+{port_num}/g'
      register: tunnel_port

    - debug: msg="Observed change in tunnel port for {{ inventory_hostname }} {{ ansible_port }} -> {{ tunnel_port.stdout }}"
      when: ansible_port is defined # only defined when running this playbook over ssh

    - name: waiting for server to come back
      delegate_to: "{{ manager_domain_name }}"
      wait_for: host=localhost port={{ tunnel_port.stdout }} state=started delay=3 timeout=10
      become: false

    - name: set new port for remainder of ansible playbook
      set_fact: ansible_port={{ tunnel_port.stdout }}
      when: ansible_port is defined and ansible_port != tunnel_port.stdout